Β' Μέρος-Bash Script

Εκτέλεση: $./testFile.sh ./testfiles/virusesfile.txt ./testfiles/countries.txt 50000 1
Η έξοδος δημιουργείται στο αρχείο ./inputFile.txt
Το script κάνει έλγχο εισόδου του χρήστη ως προς τον αριθμό τον ορισμάτων.Αν ζητηθούν πάνω απο 10000 
μοναδικές εγγραφές εκτυπώνεται μήνυμα λάθους επειδή για 1-4 ψηφία έχουμε μονο 10000 δυνατά διαφορετικά 
id (0-9999).
Έπειτα διαβάζει τα αρχεία με τους ιούς και τις χώρες και κρατάει τα έγκυρα, σύμφωνα με την μορφή τους 
από το πρώτο μέρος της εκφώνησης ώστε να δημιουργεί σωστή είσοδο για την εφαρμογή, και τα βάζει σε 
πίνακες ώστε να υπάρχει εύκολη πρόσβαση. 
Για την δημιουργία εγγραφών, κρατούνται σε πίνακα οι εγγραφές με μοναδικό id (μόνο τα πεδία id firstName 
lastName country age), ώστε στην περίπτωση που φτιάχνεται μία άλλη εγγραφή με το ίδιο id να παίρνει απο 
εκεί τα 5 πρώτα πεδία (ώστε να είναι συνεπής ως προς αυτά τα πεδία) και να αλλάζουν μόνο τα virus answer 
[date]. Έτσι ελέγχεται αποτελεσματικά η εφαρμογή vaccineMonitor στο κομμάτι της λειτουργίας των δομών 
επειδή για παράδειγμα αν οι εγγραφές με το ίδιο id ήταν incosistent ήδη λόγω διαφορετικού ονόματος, δεν 
θα έμπαιναν σε πολλές λίστες για ιούς. Αν duplicatesAllowed=1, η περίπτωση να φτιάξει διπλότυπη εγγραφή 
το πρόγραμμα είναι 10%. Όταν τελειώσουν τα μοναδικά id τότε σταματάει να δημιουργεί καινουριους πολίτες 
και παίρνει από τον πίνακα records και προσθέτει τυχαία τα 3 τελευταία πεδία.
Παρατήρησα ότι υπάρχει σημαντική καθυστέρηση στα linux της σχολής. Ενώ στον υπολογιστή μου κάνει περίπου 
1.4 sec στης σχολής κάνει περίπου 3,5-4 λεπτά.

Α' Μέρος-VaccineMonitor

Μεταγλώττιση & εκτέλεση:
Το makefile βρίσκεται στον αρχικό κατάλογο για να είναι πιο εύκολη η διαδικασία. Με την εντολή
$make
δημιουργούνται τα object files στον φάκελο bin και το εκτελέσιμο στον φάκελο build. Εφόσον το inputFile.txt 
βρίσκεται στον αρχικό κατάλογο τότε με την εντολή:
$./build/vaccineMonitor -c inputFile.txt  -b 100000
ή
$make run
τρέχει το πρόγραμμα με είσοδο απο το αρχείο inputFile.txt και με bloom filter size 100Κ bytes (σαν είσοδο 
στο πρόγραμμα δίνεται αριθμός σε bytes). 

Δομές-Γενικά:
● Κλειδιά: Τα κλειδιά όλων των δομών που χρησημοποιούνται είναι δείκτες ώστε να αποφεύγεται και εκεί το data
 duplication. Το κλειδί των skip list το οποίο είναι το citizenID δείχνει στο αντίστοιχο πεδίο του 
 citizenRecord. Tο κλειδί στο hash table των bloom filters είναι ο ιός στον οποίο αναφέρεται το bloom filter 
 και είναι δείκτης σε συμβολοσειρά που αποθηκεύεται στο hash table των ιών. Το ίδιο ισχύει και στο hash 
 table των skiplists.

● Αντικείμενα: Επίσης τα αντικείμενα που αποθηκεύονται στα hash tables και στα skip lists είναι τύπου void* 
ώστε να δέχονται οποιοδήποτε δείκτη σε αντικείμενο. Για παράδειγμα το hash table για τις χώρες αποθηκεύει 
strings, ενώ το hash table για τους πολίτες περιέχει structs του τύπου citizenRecord. Οι δομές που περιέχουν 
pointers σε αντικείμενα δέχονται στην συνάρτηση αρχικοποίησης τους έναν pointer που δείχνει στην συνάρτηση 
που θα καταστρέψει αυτά τα αντικείμενα. 'Ετσι αυτή η συνάρτηση αποθηκεύεται στο struct της δομής και 
χρησημοποιείται κατά το delete ή το remove απο την δομή. Αν ο pointer στην συνάρτηση καταστροφής είναι NULL 
τότε δεν καταστρέφει τα αντικείμενα.

● Hash Table: Υλοποιήθηκε ένα extendible hash table έτσι ώστε να γίνεται αποδοτικά η εισαγωγή και οι 
αναζήτηση δεδομένων, ανεξάρτητα από το μέγεθος εισόδου. Σε hash tables αποθηκεύονται  με δείκτες οι πολίτες,
τα ονόματα των χωρών και οι δομές VirusEntry (μία για κάθε ιό). Τα hash tables των χωρών χρησημεύουν για 
να αποθηκεύονται οι συμβολοσειρές εκεί και έτσι οπουδήποτε αλλού χρειάζεται αυτη η χώρα να υπάρχει δείκτης 
προς αυτήν την συμβολοσειρά. Οι πολίτες κρατιούνται σε δομή της μορφής {id, firstName, lastName, country, age}
όπου το country είναι δείκτης που δείχνει στις συμβολοσειρές στις οποίες δείχνει και το hash table των χωρών. 
Επίσης όπου χρειάζεται αναφορά σε έναν πολίτη υπάρχει δείκτης προς αυτή τη δομή. Στο hash table που αποθηκεύει 
πληροφορίες για τους εμβολιασμούς (VaccineTable) αποθηκεύονται δομές VirusEntry οι οποίες για έναν ιό 
περιέχουν το όνομα του ιού, δύο skip lists -ένα για τους εμβολιασμένους πολίτες κι ένα για τους μη ε
μβολιασμένους και ένα bloomfilter για τους εμβολιασμένους πολίτες. Ο λόγος που επιλέχθηκε η δομή του VirusEntry 
είναι ότι κάθε μέλος της δομής έχει το ίδιο κλειδί, δηλαδή το όνομα του ιού, και έτσι είναι αποδοτικό να επιστρέφονται 
όλα μαζί, παρά να είναι το καθένα σε ξεχωριστό hash table.
Το hash table διπλασιάζεται κάθε φορά που το load factor υπερβαίνει μια σταθερά. Δεν έχει υλοποιηθεί συνάρτηση για 
σμίκρυνση του hash table επειδή λόγω της φύσης της εφαρμογής δεν αφαιρούνται πολίτες, ιοί και χωρές, αλλά μόνο 
προστίθενται στο σύστημα. Η επέκταση γίνεται με την συνάρτηση HashT_resize.

● Skip Lists: To skip list υλοποιήθηκε σύμφωνα με της πηγές που δόθηκαν στην εκφώνηση. Στην συνάρτηση 
αρχικοποίησης δέχεται ένα άνω όριο επιπέδων. Αυτό έχει οριστεί για την εφαρμοφή με μία σταθερά στο 
αρχείο functions.h την SKIPMAXLEVEL  η οποία είναι αρκετά μεγαλύτερη από το προβλεπόμενο μέγιστο ύψος
των skip lists. Το skip list χρημοποιεί τις δομές και μεθόδους του list.h ώστε να διαχειρίζεται τις 
ταξινομημένες συνδεδεμένες λίστες. Τα list έχουν υλοποιηθεί ώστε να αποτελούν κομμάτι του skip list 
και δεν είναι γενικός τύπος. Γιαυτό πολλές από τις συναρτήσεις τους έχουν ως τύπο επιστροφής void* 
και μόλις εκπληρώσουν τον σκοπό τους επιστρέφουν τον αντίστοιχο pointer στο χαμηλότερο επίπεδο, ώστε 
να το χρησημοποιήσουν κατάλληλα οι συναρτήσεις του skip list. Πιο αναλυτικά για κάθε συνάρτηση 
υπάρχουν σχόλια στον πηγαίο κώδικα (η insert περιγράφεται και πιο κάτω). Κάθε κομβος του list 
περιέχει έναν δείκτη που δείχνει στο χαμηλότερο επίπεδο. Στο επίπεδο 0 το χαμηλότερο επίπεδο είναι 
τα δεδομένα ενώ στα υψηλότερα επίπεδα i>0 έιναι δείκτες στους κόμβους της λίστας του i-1 επιπέδου.

Στην εφαρμογή τα skip lists χρησημοποιούνται για να κρατάνε τους εμβολιασμένους πολίτες για κάθε ιό 
και τους μη εμβολιασμένους για κάθε ιό. Στα skip lists για τους μη εμβολιασμένος οι προς τα κάτω δείκτες 
του χαμηλότερου επιπέδου δείχνουν σε  εγγραφές πολιτών (οι οποίοι είναι μοναδικά αποθηκευμένοι σε hash 
table). Στα skip lists για τους εμβολιασμένους πολίτες πρέπει να κρατείται και η ημερομηνία, οπότε έχει 
δημιουργηθεί η δομή date_citizen που περιέχει έναν δείκτη σε πολίτη (που είναι αποθηκευμένος στο hash table)
και μία συμβολοσειρά για την ημερομηνία. Έτσι το προς τα κάτω επίπεδο δείχνει σε δομές τέτοιου τύπου και 
μπορεί να ανακτηθέι η ημερομηνία εμβολιασμού όποτε χρειάζεται.

insert: Το insert γίνεται από κάτω προς τα πάνω στο skip list, αλλά επειδή ο δείκτης που κρατάει την αρχή 
του skip list είναι ο δείκτης στο υψηλότερο επίπεδο γίνεται η παρακάτω διαδικασία. Η συνάρτηση πρώτα 
υπολογίζει το ύψος του καινούριου κόμβου και αν αυτό το ύψος είναι μεγαλύτερο από το τωρινό προσθέτει 
λίστες πάνω από τις ήδη υπάρχουσες ώστε να μπορούν να δεχθούν τον καινούριο κόμβο. Μετά ξεκινάει από 
το υψηλότερο επίπεδο και κρατάει για κάθε επίεπδο έναν δείκτη στον κόμβο μετά από τους οποίο θα προστεθεί 
ο καινούριος κόμβος. Τέλος εισάγει ξεκινώντας από την βάση μέχρι το καθορισμένο ύψος τους κατάλληλους 
κόμβους μετά από τους δείκτες τους οποίους έχει αποθηκεύσει.

● Bloom Filter: Τα bloom filters υλοποιούνται με πίνακα απο chars. Κάθε κελί είναι 1 byte = 8 bits και 
γίνονται αλλαγές σε επίπεδο bit, ώστε να χρησημοποιείται όσο το δυνατόν λιγότερος χώρος γίνεται. Για 
παράδειγμα ένα bloom filter μεγέθους size (σε bits) θα καταλαμβάνει ceil(size/8) κελιά στον πίνακα. Για 
να πάρουμε ένα συγκεκριμένο bit εστω το bit 20 βρίσκουμε αρχικά το κελί στο οποίο ανήκει δηλ. 
floor(20/8)=2 και μετά το offset μέσα σε αυτό το κελί, δηλ. 20modulo8 = 4, οπότε ελέγχουμε το bit στη θέση 4
 στο cell 2.
     0        1        2
|________|________|________|
 01234567 01234567 01234567
 
Στην εφαρμογή vaccineMonitor για την εισαγωγή-αναζήτηση στα bloom filters χρησημοποιείται το id καθώς είναι 
μοναδικό για κάθε πολίτη. Ως αριθμό συναρτήσεων Κ στην συνάρτηση αρχικοποίησης δίνεται η σταθερά Κ η οποία 
έχει οριστεί 16 στο αρχείο functions.h και ως μέγεθος δίνεται η είσοδος του προγράμματος που έχει μετατραπεί α
πό bytes σε bits, επειδή η συνάρτηση αρχικοποίησης δέχεται είσοδο σε bits.

● Στις δομές skip list και hash table πολλές φορές χρειάζεται να πάρουμε κάθε entry τους για να 
επεξεργαστούμε τις πληροφορίες που κρατάνε, π.χ να βρούμε στα skiplist όλων των ιών αν υπάρχει ένας πολίτης 
ώστε να δούμε ποια εμβόλια έχει κάνει η όχι όπως στο /vaccineStatus citizenID. Γιαυτό υπάρχουν οι συναρτήσεις 
skiplist_getNextEntry, HashT_getNextEntry, που επιστρέφουν ένα ένα τα entries των δομών.
● Περαιτέρω λεπτομέρειες και ειδικά σχετικά με την λειτουργεία των μεθόδων των δομών που περιγράφηκαν υπάρχουν 
αναλυτικά στα σχόλια του αντίστοιχου κώδικα.

input_read, input_init, input_print: 
Για οργανωμένη και εύκολη διαχείριση της εισόδου, αφού διαβαστεί μία γραμμή είτε από το αρχείο εγγραφών είτε ως είσοδο 
από το πληκτρολόγιο στο κομμάτι τωνερωτημάτων, η γραμμή αυτή περνάει στην συνάρτηση input_read ώστε να χωριστεί σε λέξεις 
στον πίνακα parameter για να γίνει η επεξεργασία της εγγραφής ή του ερωτήματος. Όταν τελειώσει με την εγγραφή ή το ερώτημα, 
ο πίνακας αρχικοποιείται με την συνάρτηση input_init. Ότι ήταν δυναμικά δεσμευμένο με την input_read αποδευσμεύεται στο 
τέλος του ερωτήματος, οπότε όπου χρειάζεται να κρατηθούν δεδομένα από τον πίνακα parameters δεσμεύουν ξεχωριστά μνήμη και 
αντιγράφονται. Η input_print εκτυπώνει το περιεχόμενο του πίνακα parameter.

Διάβασμα του αρχείου:
Αρχικά ελέγχεται το format των παραμέτρων και αν υπάρχει ήδη αυτό το ID αλλά ο πολίτης διαφέρει σε κάποιο από τα πεδία, 
ώστε να εμφανίστει ERROR IN RECORD. Στην περίπτωση που ο πολίτης είχε καταχωρηθεί ως μη εμβολιασμένος για αυτόν τον 
ιό και τώρα η εγγραφή λέει ότι είναι εμβολιασμένος, τότε η δεύτερη εγγραφή θεωρείται incosistent και τυπώνεται ERROR IN 
RECORD ... . Αν υπάρχει ήδη εγγραφή με YES και έρθει εγγραφή είτε με NO είτε με YES τότε εμφανίζεται και αυτό ως ERROR IN 
RECORD. Αν υπήρχε εγγραφη NO και έρθει και πάλι NO τότε αγνοείται η δεύτερη χωρίς να εμφανίζει μήνυμα, επειδή 
δεν τις θεωρώ incosistent αλλά δεν πρέπει να ξαναπροστεθεί εφόσον υπάρχει ήδη αυτή η πληροφορία.

Εντολές:
Σε όλες τις εντολές ελέγχεται το format και ο αριθμός των παραμέτρων.
● /vaccineStatusBloom citizenID virusName: Βρίσκει το bloom filter του ιού που δίνεται και καλεί την 
bloom_exists για να ελέγξει αν υπάρχει ο πολίτης με citizenID. Αν το bloom filter επιστρέψει ότι δεν υπάρχει 
αυτό το ID, τότε εκτυπώνεται NOT VACCINATED, ακόμα και αν το συγκεκριμένο ID δεν υπάρχει στο σύστημα. Αν 
επιστρέψει true τότε τυπώνει MAYBE, ενώ αν δεν υπάρχει ο ιός τυπώνει κατάλληλο μήνυμα.
● /vaccineStatus citizenID virusName: Αρχικά ελέγχει αν υπάρχει ο πολίτης καταχωρημένος στο κατάλληλο hash table. 
Αν υπάρχει, βρίσκει την vaccinated skip list του ιού και κοιτάει αν υπάρχει εκεί ο πολίτης με αυτό το id. Αν 
υπάρχει τότε παίρνει την εγγραφή από το skip list και τυπώνει ότι είναι εμβολιασμένος και την ημερομηνία που 
εμβολιάστηκε.
● /vaccineStatus citizenID: Eλέγχει αρχικά αν υπάρχει καταχωρημένος πολίτης με αυτό το ID. Αν υπάρχει τότε για 
κάθε ιό που υπάρχει στο VaccineTable παίρνει τα δύο skiplists και τυπώνει YES και ημερομηνία αν βρεθεί το ID 
στο vaccinated skip list και NO αν βρεθεί το ID στο non vaccinated persons skip list.
● /populationStatus [country] virusName [date1 date2]: Τα dates είναι προεραιτικά και τα ποσοστά υπολογίζονται 
σύμφωνα με τις υποδείξεις στο piazza. Στην περίπτωση που έχει δοθεί country μετριούνται οι εμβολισμένοι και οι
μη εμβολιασμένοι για τον ιό virusName και οι εμβολιασμένοι μέσα στο δοσμένο διάστημα αν υπάρχει. Έπειτα 
υπολογίζονται τα ποσοστά και εκτυπώνονται. Για την περίπτωση που δεν δίνεται country υπάρχουν στο functions.h 
μία δομή country_counter και συναρτήσεις για την αρχικοποίηση και την διαγραφή της, η οποία περιέχει αντιστοιχα 
με τα παραπάνω counters. Τέτοιες δομές αποθηκεύονται σε ένα hash table ώστε να εισάγονται και να ανακτώνται 
γρήγορα με βάση το όνομα της χώρας.
● /popStatusByAge [country] virusName [date1 date2]: Αντίστοιχα με την /populationStatus, αλλά κάθε εγγραφή 
κατατάσεται σε ένα εύρος σύμφωνα με την ηλικία του πολίτη. Έτσι κάθε μετρητής είναι ένας πίνακας 4 θέσων. 
Αντίστοιχα υπάρχει η δομή country_counterbyage.
● /insertCitizenRecord citizenID firstName lastName country age virusName YES/NO [date]: Αρχικά ελέγχει το 
format των παραμέτρων και αν υπάρχει ήδη αυτό το ID αλλά ο πολίτης διαφέρει σε κάποιο από τα πεδία, ώστε 
να εμφανίσει κατάλληλο μήνυμα. Εδώ, στην περίπτωση που ο πολίτης είχε καταχωρηθεί ως μη εμβολιασμένος για 
αυτόν τον ιό και τώρα η εγγραφή λέει ότι είναι εμβολιασμένος, διαγράφεται το ID από την non vaccinated 
skip list του ιου και προστίθεται στην vaccinated skip list και στο bloom filter. Αν υπάρχει ήδη εγγραφή 
με YES και έρθει εγγραφή είτε με NO είτε με YES τότε εμφανίζεται ότι ο πολίτης αυτός έχει ήδη εμβολιαστεί. 
Αν υπήρχε εγγραφη NO και έρθει και πάλι NO τότε αγνοείται η δεύτερη χωρίς να εμφανίζει μήνυμα.
● /vaccinateNow citizenID firstName lastName country age virusName: Λειτουργεί αντίστοιχα με την εισαγωγή 
μιας εγγραφής με YES από την insertCitizenRecord με ημερομηνία την σημερινή, η οποία βρίσκεται από την 
συνάρτηση get_current_date.
● /list-nonVaccinated-Persons virusName: Βρίσκει στo VaccineTable το struct με τον ιό. Αν δεν υπάρχει ο 
ιός τυπώνει μήνυμα, ενώ αν υπάρχει τότε με την βοήθεια της συνάρτησης skiplist_getNextEntry τυπώνει 
κάθε εγγραφή πολίτη που βρίσκεται στην non-vaccinated skip list του ιού.
● /exit: Διακόπτει τον βρόχο ώστε να τερματίσει το πρόγραμμα.
